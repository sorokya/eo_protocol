
enum PacketFamily : byte
{
	 1 Security
	 2 Account
	 3 Character
	 4 Login
	 5 Play
	 6 Move
	 7 Direction
	 8 Sit
	 9 Emote
	10 Warp
	11 Attack
	12 Magic
	13 Shop
	14 Item
	16 Skill
	17 Global
	18 Chat
	19 Map
	20 Talk
	21 Music
	22 Players
	23 Player
	24 Group
	25 Refresh
	26 NPC
	27 PlayerRange
	28 NpcRange
	29 Range
	30 Paperdoll
	31 Effect
	32 Trade
	33 Chest
	34 Door
	35 System
	36 Bank
	37 Locker
	38 Barber
	39 Guild
	40 Sound
	41 Rest
	42 GameBar
	43 Board
	44 MagicNpc
	45 Arena
	46 Priest
	47 Law
	48 Admin
	49 Inn
	50 Quest
	51 Book
	52 Boss
	250 Err
	255 Init
}

enum PacketAction : byte
{
	 1 Request
	 2 Confirm
	 3 Result
	 4 Delete
	 5 Update
	 6 New
	 7 Add
	 8 Set
	 9 Get
	10 Do
	11 Buy
	12 Sell
	13 Open
	14 Close
	15 Play
	16 Hit
	17 Cast
	18 List
	19 Normal
	20 Private
	21 Public
	22 Global
	23 System
	24 Drop
	25 Junk
	26 Give
	27 Pickup
	28 Remove
	29 Rank
	30 Target_Self
	31 Target_Other
	32 Target_Area
	33 Target_Group
	34 Talk
	35 Swap
	220 Config
	240 Syn1
	241 Syn2
	242 Syn3
	243 Syn4
	244 Syn5
	250 Err
	255 Init
}

// ---

enum AdminLevel : char
{
	0 Player
	1 Guide
	2 Guardian
	3 GM
	4 HGM
}

enum Direction : char
{
	0 Down
	1 Left
	2 Up
	3 Right
}

enum Emote : char
{
	 1 Happy
	 2 Depressed
	 3 Sad
	 4 Angry
	 5 Confused
	 6 Surprised
	 7 Hearts
	 8 Moon
	 9 Suicidal
	10 Embarrassed
	11 Drunk
	12 Trade
	13 LevelUp
	14 Playful
}

enum QuestPage : char
{
	1 Progress
	2 History
}

enum Gender : char
{
	0 Female
	1 Male
}

enum Skin : char
{
	0 White
	1 Tan
	2 Yellow
	3 Orc
	4 Skeleton
	5 Panda
	6 Fish
}

enum PaperdollIcon : char
{
	 0 Normal
	 4 GM
	 5 HGM
	 6 Group
	 9 GM_Group
	10 HGM_Group
}

enum AvatarSlot : char
{
	1 Clothes
	2 Hair
	3 HairColor
}

enum ChatResult : short
{
	1 NotFound
}

enum SitState : char
{
	0 Stand
	1 Chair
	2 Floor
}

enum SitAction : char
{
	1 Sit
	2 Stand
}

enum TrainType : char
{
	1 Stat
	2 Skill
}

enum BookIcon : short
{
	 3 Item
	 5 Talk
	 8 Kill
	10 Step
}

enum DialogEntryType : char
{
	1 Text
	2 Link
}

enum DialogResult : char
{
	1 OK
	2 Link
}

enum InitResult : byte
{
	  1 Out_Of_Date
	  2 OK
	  3 Banned
	  5 File_Map
	  6 File_EIF
	  7 File_ENF
	  8 File_ESF
	  9 Players
	 10 Map_Mutation
	 11 Friend_List_Players
	 12 File_ECF
}

enum InitBanType : byte
{
	0 Temp
	2 Perm
}

enum FileType : char
{
	1 Map
	2 Item
	3 NPC
	4 Spell
	5 Class
}

enum GuildResult : short
{
	 1 Busy
	 2 Not_Approved
	 3 Already_Member
	 4 No_Candidates
	 5 Exists
	 6 Create_Begin
	 7 Create_Add_Confirm
	 8 Create_Add
	 9 Recruiter_Offline
	10 Recruiter_Not_Here
	11 Recruiter_Wrong_Guild
	12 Not_Recruiter
	13 Join_Request
	14 Not_Present
	15 Account_Low
	16 Accepted
	17 Not_Found
	18 Updated
	19 Ranks_Updated
	20 Delete_Leader
	21 Delete_Not_Member
	22 Deleted
	23 Ranking_Leader
	24 Ranking_Not_Member
}

enum GuildInfoType : short
{
	1 Description
	2 Ranks
	3 Bank
}

enum MapEffect : char
{
	1 Quake
}

enum InnUnsubscribeResult : char
{
	0 Not_Citizen
	1 Unsubscribed
}

enum SkillMasterResult : short
{
	1 Remove_Items
	2 Wrong_Class
}

enum GroupRequestType : char
{
	0 Join
	1 Invite
}

enum CharacterResult : short
{
	1 Exists
	2 Full
	3 Not_Approved
	5 OK
	6 Deleted
}

enum AccountResult : short
{
	1 Exists
	2 Not_Approved
	3 Created
	5 Change_Failed
	6 Changed
}

enum LoginResult : short
{
	1 Wrong_User
	2 Wrong_UserPass
	3 OK
	5 LoggedIn
	6 Busy
}

enum WarpAnimation : char
{
	1 Scroll
	2 Admin
}

enum WarpType : char
{
	1 Local
	2 MapSwitch
}

enum ItemType : char
{
	 1 Static
	 3 Money
	 4 Heal
	 5 Teleport
	 6 Spell
	 7 EXPReward
	 8 StatReward
	 9 SkillReward
	10 Key
	11 Weapon
	12 Shield
	13 Armor
	14 Hat
	15 Boots
	16 Gloves
	17 Accessory
	18 Belt
	19 Necklace
	20 Ring
	21 Armlet
	22 Bracer
	23 Beer
	24 EffectPotion
	25 HairDye
	26 CureCurse
}

// ---

struct Paperdoll_BAHWS
{
	short boots
	short armor
	short hat
	short weapon
	short shield
}

struct Paperdoll_BAHSW
{
	short boots
	short armor
	short hat
	short shield
	short weapon
}

struct Paperdoll_B000A0HSW
{
	short boots
	short = 0
	short = 0
	short = 0
	short armor
	short = 0
	short hat
	short shield
	short weapon
}

struct Paperdoll_Full
{
	short boots
	short accessory
	short gloves
	short belt
	short armor
	short necklace
	short hat
	short shield
	short weapon
	short ring[2]
	short armlet[2]
	short bracer[2]
}

struct TinyCoords
{
	char x
	char y
}

Struct Coords
{
	short x
	short y
}

struct Weight
{
	char current
	char max
}

struct Item
{
	short id
	int amount
}

struct ReverseItem
{
	int amount
	short id
}

"Used for shops, lockers, and various item transfers"
struct ShortItem
{
	short id
	three amount
}

"Used for craft ingredients"
struct VeryShortItem
{
	short id
	char amount
}

struct Spell
{
	short id
	short level
}

struct PlayerRange
{
	string name
	short id
	short map_id
	struct Coords coords
	Direction direction
	char class_id
	raw_string(3) guild_tag
	char level
	char gender
	char hairstyle
	char haircolor
	Skin skin_id
	short max_hp
	short hp
	short max_tp
	short tp
	struct Paperdoll_B000A0HSW paperdoll
	SitState sit_state
	char invisible
	break
}

struct NpcRange
{
	char index
	short id
	struct TinyCoords coords
	Direction direction
}

struct ItemMapInfo
{
	short uid
	short id
	struct Coords coords
	three amount
}

struct AvatarChange
{
	short player_id
	AvatarSlot slot
	char sound

	union(slot)
	{
		Clothes: clothes
		{
			struct Paperdoll_BAHWS paperdoll
		}

		Hair: hair
		{
			char style
			char color
		}

		HairColor: hair_color
		{
			char color
		}
	}
}

struct NearbyInfo
{
	char num_characters
	break
	struct PlayerRange characters[num_characters]
	struct NpcRange npcs[]
	break
	struct ItemMapInfo items[]
}

// --- Init

struct OnlinePlayers
{
	string name
	string title
	char = 0
	PaperdollIcon icon
	char class_id
	raw_string(3) guild_tag
	break
}

"Initialization request"
client_packet(Init, Init)
{
	three challenge
	char version[3]
	char = 0
	char = 0
	raw_string hdid

	fn static eo_int stupid_hash(eo_int i)
	{
		++i;
		return 110905 + (i % 9 + 1) * ((11092004 - i) % ((i % 11 + 1) * 119)) * 119 + i % 2004;
	}
}

"Initialization result"
server_packet(Init, Init)
{
	InitResult result_code

	union(result_code)
	{
		Out_Of_Date: out_of_date
		{
			char version[3]
		}

		OK: ok
		{
			byte seq_bytes[2]
			byte decode_multiple
			byte encode_multiple
			short player_id
			int response

			fn eo2_uint seq_start() const
			{
				eo2_uint s1 = seq_bytes[0];
				eo2_uint s2 = seq_bytes[1];

				return (s1 * 7 + s2 - 13);
			}
		}

		Banned: banned
		{
			InitBanType ban_type

			union(ban_type)
			{
				Temp: ban_temp
				{
					byte mins_remaining
				}
			}
		}

		File_Map: file_map
		{
			raw_string content
		}

		File_EIF: file_eif
		{
			char file_id
			raw_string content
		}

		File_ENF: file_enf
		{
			char file_id
			raw_string content
		}

		File_ESF: file_esf
		{
			char file_id
			raw_string content
		}

		File_ECF: file_ecf
		{
			char file_id
			raw_string content
		}

		Map_Mutation: map_mutation
		{
			raw_string content
		}

		Players: players
		{
			short num_online
			break
			struct OnlinePlayers list[]
		}

		Friend_List_Players: friends
		{
			// Should probably be number of friends but what do I know
			short num_online
			break
			// EOSERV is generous enough to send each player name twice
			string list[]
		}
	}
}


// --- Security

"Confirm initialization data"
client_packet(Security, Confirm)
{
	short encode_multiple
	short encode_multiple
	short player_id
}

"Ping result"
client_packet(Security, Syn1)
{
	raw_string k // "k"
}

"Ping request"
server_packet(Security, Set)
{
	short seq1
	char seq2

	fn eo2_uint seq_start() const
	{
		return eo2_uint(seq1) - eo2_uint(seq2);
	}
}


// --- Account

"Request creating an account"
client_packet(Account, Request)
{
	raw_string username
}

"Confirm creating an account"
client_packet(Account, New)
{
	short session_id
	break
	string username
	string password
	string fullname
	string location
	string email
	string computer
	string hdid
}

"Change password"
client_packet(Account, Update)
{
	string username
	string oldpassword
	string newpassword
}

"Result to client Account-family packets"
server_packet(Account, Result)
{
	AccountResult result_code

	// TODO: Represent optionally present data
	char sequence_start

	raw_string ok_no

	fn eo_short session_id() const
	{
		return eo_short(result_code);
	}
}


// --- Character

"Character selection screen character info"
struct Character_Info
{
	string name
	int id
	char level
	Gender gender
	char hairstyle
	char haircolor
	Skin skin
	AdminLevel admin
	struct Paperdoll_BAHSW paperdoll
	break
}

"Character selection screen character info"
struct Character_List
{
	char num_characters
	char = 1
	break
	struct Character_Info characters[num_characters]
}

"Request to create a character"
client_packet(Character, Request)
{
	string new // NEW
}

"Confirm creating a character"
client_packet(Character, New)
{
	short session_id
	Gender:short gender
	short hairstyle
	short harcolor
	Skin:short skin
	break
	string name
}

"Confirm deleting character from an account"
client_packet(Character, Delete)
{
	short session_id
	int character_id
}

"Request to delete a character from an account"
client_packet(Character, Get)
{
	int character_id
}

"Result for client Character-family packets"
server_packet(Character, Result)
{
	CharacterResult result_code
	raw_string ok_no

	union(result_code)
	{
		OK: ok
		{
			struct Character_List character_list
		}

		Deleted: deleted
		{
			struct Character_List character_list
		}
	}

	fn eo_short session_id() const
	{
		return eo_short(result_code);
	}
}

"Result for client Character_Get"
server_packet(Character, Set)
{
	short session_id
	int character_id
}


// --- Login

"Login request"
client_packet(Login, Request)
{
	string username
	string password
}

"Login result"
server_packet(Login, Result)
{
	LoginResult result_code

	union(result_code)
	{
		OK: ok
		{
			struct Character_List character_list
		}
	}
}


// --- Play

struct ServerSettings
{
	short jail_map
	short rescue_map
	char rescue_x
	char rescue_y
	short light_guide_flood_rate
	short guardian_flood_rate
	short gm_flood_rate
	short hgm_flood_rate
}

enum PlayCode : short
{
	1 SelectCharacter
	2 EnterGame
}

"Selected a character"
client_packet(Play, Request)
{
	int character_id
}

"Entering game"
client_packet(Play, Play)
{
	three session_id
	int character_id
}

"Requesting a file"
client_packet(Play, Update)
{
	FileType file_type
	short session_id
	union (file_type)
	{
		Map: map
		{
			short character_id
		}
		Item: item
		{
			char file_id
		}
		NPC: npc
		{
			char file_id
		}
		Spell: spell
		{
			char file_id
		}
		Class: class
		{
			char file_id
		}
	}
}

"Result to selecting a character / entering game"
server_packet(Play, Result)
{
	PlayCode play_code

	union(play_code)
	{
		SelectCharacter: select_character
		{
			short session_id
			int character_id
			short map_id
			short map_rid[2]
			three map_filesize
			short eif_rid[2]
			short eif_length
			short enf_rid[2]
			short enf_length
			short esf_rid[2]
			short esf_length
			short ecf_rid[2]
			short ecf_length
			string name
			string title
			string guild_name
			string guild_rank_name
			char class_id
			raw_string(3) guild_tag
			AdminLevel admin
			char level
			int experience
			int usage
			struct CharacterStats2 stats
			struct Paperdoll_Full paperdoll
			char guild_rank
			struct ServerSettings settings
			char login_message
			break
		}

		EnterGame: enter_game
		{
			break
			string news[9]
			struct Weight weight
			struct Item items[]
			break
			struct Spell spells[]
			break
			struct NearbyInfo nearby
		}
	}
}


// --- Admin

enum AdminMessageType : char
{
	1 Message
	2 Report
}

struct CharacterStats4
{
	short hp
	short max_hp
	short tp
	short max_tp
	struct CharacterBaseStats base
	struct CharacterSecondaryStats secondary
}

"Talk to admin"
client_packet(Admin, Private)
{
	raw_string message
}

"Report character"
client_packet(Admin, Public)
{
	string reportee
	raw_string message
}

"Incoming admin report"
server_packet(Admin, Result)
{
	AdminMessageType message_type
	break

	union(message_type)
	{
		Message: message
		{
			string player_name
			string message
			string reportee_name
		}

		Report: report
		{
			string player_name
			string message
		}
	}
}

"Nearby player disappearing (admin hide)"
server_packet(Admin, Delete)
{
	short player_id
}

"Nearby player appearing (admin un-hide)"
server_packet(Admin, Update)
{
	short player_id
}

"Admin character inventory popup"
server_packet(Admin, List)
{
	string name
	int usage
	break
	int gold_bank
	break
	struct Item inventory[]
	break
	struct ShortItem bank[]
	break
}

"Admin character info popup"
server_packet(Admin, Private)
{
	string name
	int usage
	break
	break
	int exp
	char level
	short map_id
	struct Coords map_coords
	struct CharacterStats4 stats
	short light
	short dark
	short fire
	short water
	short earth
	short wind
	struct Weight weight
}

// --- Global

"Enable whispers"
client_packet(Global, Delete)
{
	char = 'n'
}

"Disable whispers"
client_packet(Global, Set)
{
	char = 'y'
}

"Opened global tab"
client_packet(Global, Open)
{
	char = 'y'
}

"Closed global tab"
client_packet(Global, Open)
{
	char = 'n'
}


// --- Chat

"Guild chat message"
client_packet(Chat, Request)
{
	raw_string message
}

"Group chat message"
client_packet(Chat, Open)
{
	raw_string message
}

"Global chat message"
client_packet(Chat, Play)
{
	raw_string message
}

"Private chat message"
client_packet(Chat, Private)
{
	string name
	raw_string message
}

"Public chat message"
client_packet(Chat, Public)
{
	raw_string message
}

"Admin chat message"
client_packet(Chat, Cast)
{
	raw_string message
}

"Admin announcement"
client_packet(Chat, Global)
{
	raw_string message
}

"Guild chat message"
server_packet(Chat, Request)
{
	string player_name
	string message
}

"Group chat message"
server_packet(Chat, Open)
{
	short player_id
	string message
}

"Global chat message"
server_packet(Chat, Play)
{
	string player_name
	string message
}

"Private chat message"
server_packet(Chat, Private)
{
	string player_name
	string message
}

"Public chat message"
server_packet(Chat, Set)
{
	short player_id
	string message
}

"Admin chat message"
server_packet(Chat, Cast)
{
	string player_name
	string message
}

"Admin announcement"
server_packet(Chat, Global)
{
	string player_name
	string message
}

"System message"
client_packet(Chat, System)
{
	raw_string message
}

"Status bar message"
client_packet(System, Open)
{
	raw_string message
}

"Temporary mute applied"
server_packet(Chat, Hit)
{
	string admin_name
}


// --- Attack

"Attacking"
client_packet(Attack, Do)
{
	Direction direction
	three timestamp
}

"Nearby player attacking"
server_packet(Attack, Set)
{
	short player_id
	Direction direction
}

"Nearby player hit by another player"
server_packet(Attack, Result)
{
	short player_id
	short victim_id
	three damage
	Direction direction
	char hp_pct
	char died
}


// --- Sit

"Sitting on a chair"
client_packet(Sit, Request)
{
	SitAction sit_action
	struct Coords coords
	// TODO: Check if coords only appear for sit actions
}

"Nearby player sitting on a chair"
server_packet(Sit, Set)
{
	short player_id
	struct Coords coords
	Direction direction
	char = 0
}

"Your character sitting on a chair"
server_packet(Sit, Result)
{
	short player_id
	struct Coords coords
	Direction direction
	char = 0
}


// --- Rest

"Floor sit/stand request"
client_packet(Rest, Request)
{
	SitAction sit_action
}

"Nearby player sitting down"
server_packet(Rest, Set)
{
	short player_id
	struct Coords coords
	Direction direction
	char = 0
}

"Your character standing up"
server_packet(Rest, Close)
{
	short player_id
	struct Coords coords
}

"Nearby player standing up"
server_packet(Rest, Delete)
{
	short player_id
	struct Coords coords
}

"Your character sitting down"
server_packet(Rest, Result)
{
	short player_id
	struct Coords coords
	Direction direction
	char = 0
}


// --- Emote

"Doing an emote"
client_packet(Emote, Public)
{
	Emote emote
}

"Nearby player an emote"
client_packet(Emote, Set)
{
	short player_id
	Emote emote
}

"Nearby player doing an effect"
client_packet(Effect, Set)
{
	short player_id
	three effect_id
}


// --- Direction

"Facing a direction"
client_packet(Direction, Set)
{
	Direction direction
}

"Nearby player facing a direction"
server_packet(Direction, Set)
{
	short player_id
	Direction direction
}


// --- Move

struct MoveCommon
{
	Direction direction
	three timestamp
	struct TinyCoords coords

}

"Moving with #nowall"
client_packet(Move, Cast)
{
	struct MoveCommon move
}

"Moving through a player"
client_packet(Move, Hit)
{
	struct MoveCommon move
}

"Moving"
client_packet(Move, Set)
{
	struct MoveCommon move
}

"Nearby player has disappeared from view"
server_packet(Player, Delete)
{
	short player_id

	// TODO: Represent optionally present data
	WarpAnimation animation
}

"Player has appeared in nearby view"
server_packet(Players, Update)
{
	break
	struct PlayerRange character
	char = 1
}

"Nearby player has moved"
server_packet(Move, Set)
{
	short player_id
	Direction direction
	struct Coords coords
}

"Players, NPCs, and Items appearing in nearby view"
server_packet(Move, Result)
{
	short player_ids[]
	break
	char npc_indexes[]
	break
	struct ItemMapInfo items[]
}


// --- Bank

"Request to interact with a banker NPC"
client_packet(Bank, Open)
{
	short npc_id
}

"Depositing gold"
client_packet(Bank, Add)
{
	int amount
}

"Withdrawing gold"
client_packet(Bank, Add)
{
	int amount
}

"Open banker NPC interface"
server_packet(Bank, Open)
{
	int gold_bank
	three session_token
	char locker_upgrades
}

"Update gold counts after deposit/withdraw"
server_packet(Bank, Result)
{
	int gold_inventory
	int gold_bank
}

// --- Locker

"Placing an item in a bank locker"
client_packet(Locker, Add)
{
	struct Coords locker_coords
	struct ShortItem deposit_item
}

"Taking an item from a bank locker"
client_packet(Locker, Get)
{
	struct Coords locker_coords
	short take_item_id
}

"Opening a bank locker"
client_packet(Locker, Open)
{
	struct Coords locker_coords
}

"Buying a locker space upgrade from a banker NPC"
client_packet(Locker, Buy)
{
	// empty
}

"Response to adding an item to a bank locker"
server_packet(Locker, Result)
{
	struct Item deposited_item
	struct Weight weight
	struct ShortItem locker_items[]
}

"Response to taking an item from a bank locker"
server_packet(Locker, Pickup)
{
	struct ShortItem taken_item
	struct Weight weight
	struct ShortItem locker_items[]
}

"Opening a bank locker"
server_packet(Locker, Open)
{
	struct Coords locker_coords
	struct ShortItem locker_items[]
}

"Response to buying a locker space upgrade from a banker NPC"
server_packet(Locker, Buy)
{
	int gold_amount
	char locker_upgrades
}


// --- Inn

"Sleeping at an inn"
client_packet(Inn, Request)
{
	// TODO: EOSERV doesn't implement this
}

"Subscribing to a town"
client_packet(Inn, Result)
{
	// Check me: Not sure what these 2 break bytes are
	short session_id
	break
	short npc_id
	break
	string answer1
	string answer2
	raw_string answer3
}

"Giving up citizenship of a town"
client_packet(Inn, Delete)
{
	// Check me: Not sure if this is the session ID or if there's any proceeding data
	short session_id
}

"Request to interact with an inn keeper"
client_packet(Inn, Open)
{
	short npc_index
}

"Response to subscribing to a town"
server_packet(Inn, Result)
{
	char questions_wrong
}

"Response to giving up citizenship of a town"
client_packet(Inn, Delete)
{
	InnUnsubscribeResult result_code
}

"Response to to a citizenship NPC"
client_packet(Inn, Open)
{
	three vendor_id
	char current_home_id
	short session_id
	break
	string question1
	string question2
	raw_string question3
}

// TODO: Server sleep packet


// --- Shop

struct ShopTradeItem
{
	short item_id
	three buy_price
	three sell_price
	char max_buy_amount
}

struct ShopCraftItem
{
	short item_id
	struct VeryShortItem ingredients[4]
}

"Crafting an item from a shop"
client_packet(Shop, New)
{
	short craft_item_id
	int session_id
}

"Purchasing an item from a shop"
client_packet(Shop, Buy)
{
	short buy_item_id
	int session_id
}

"Selling an item to a shop"
client_packet(Shop, Sell)
{
	struct Item sell_item
	int session_id
}

"Request to view an NPCs shop"
client_packet(Shop, Open)
{
	short npc_index
}

"Response to crafting an item from a shop"
server_packet(Shop, New)
{
	short craft_item_id
	struct Weight weight
	struct Item ingredients[4]
}

"Response to purchasing an item from a shop"
server_packet(Shop, Buy)
{
	int gold_amount
	struct Item bought_item
	struct Weight weight
}

"Response to selling an item to a shop"
server_packet(Shop, Sell)
{
	struct ReverseItem sold_item
	int gold_amount
	struct Weight weight
}

"Open shop NPC interface"
server_packet(Shop, Open)
{
	short session_id
	string shop_name
	struct ShopTradeItem trade_items[]
	break
	struct ShopCraftItem craft_items[]
	break
}


// --- Skill

struct CharacterBaseStats
{
	short str
	short intl
	short wis
	short agi
	short con
	short cha
}

struct CharacterSecondaryStats
{
	short mindam
	short maxdam
	short accuracy
	short evade
	short armor
}

struct CharacterStats1
{
	short stat_points
	short skill_points
	short hp
	short max_hp
	short tp
	short max_tp
	short max_sp
	struct CharacterBaseStats base
	struct CharacterSecondaryStats secondary
}

struct CharacterStats2
{
	short hp
	short max_hp
	short tp
	short max_tp
	short max_sp
	short stat_points
	short skill_points
	short karma
	struct CharacterSecondaryStats secondary
	struct CharacterBaseStats base
}

struct CharacterStats3
{
	struct CharacterBaseStats base
	short max_hp
	short max_tp
	short max_sp
	short max_weight
	struct CharacterSecondaryStats secondary
}

struct SkillLearn
{
	short id
	char level_req
	char class_req
	int cost
	short skill_req[4]
	struct CharacterBaseStats stat_req
}

"Request to interact with a skill master NPC"
client_packet(Skill, Open)
{
	short npc_index
}

"Learning a skill from a skill master"
client_packet(Skill, Get)
{
	int session_id
	short spell_id
}

"Forgetting a skill at a skill master"
client_packet(Skill, Delete)
{
	int session_id
	short spell_id
}

enum StatId : short
{
	1 Str
	2 Int
	3 Wis
	4 Agi
	5 Con
	6 Cha
}

"Spending a stat point on a stat or skill"
client_packet(Skill, Add)
{
	TrainType action_type

	union(action_type)
	{
		Stat: stat
		{
			StatId stat_id
		}

		Skill: skill
		{
		}
	}
}

"Resetting stats at a skill master"
client_packet(Skill, Junk)
{
	int session_id
}

"Open skill master NPC interface"
server_packet(Skill, Open)
{
	short session_id
	string shop_name
	struct SkillLearn skills[]
}

"Response to attempting to learn a skill from a skill master"
server_packet(Skill, Result)
{
	SkillMasterResult result_code

	union(result_code)
	{
		Remove_Items: remove_items
		{
			// TODO: EOSERV doesn't implement - is this really empty?
		}

		Wrong_Class: wrong_class
		{
			short class_id
		}

		// FIXME: Add support for this to the parser
		default: ok
		{
			int gold_amount
		}
	}

	fn eo_short spell_id() const
	{
		return eo_short(result_code);
	}
}

"Response to forgetting a skill at a skill master"
server_packet(Skill, Delete)
{
	short spell_id
}

"Response to spending stat points"
server_packet(Skill, Set)
{
	short stat_points
	struct CharacterStats3 stats
}

"Response to spending skill points"
server_packet(Skill, Confirm)
{
	short skill_points
	struct Spell spell
}

"Response to resetting character"
server_packet(Skill, Junk)
{
	struct CharacterStats1 stats
}



// --- Item

struct ItemCharacterStats
{
	short max_hp
	short max_tp
	struct CharacterBaseStats base
	struct CharacterSecondaryStats secondary
}

"Using an item"
client_packet(Item, Do)
{
	short use_item_id
}

"Dropping items on the ground"
client_packet(Item, Drop)
{
	// Official EO sends either 3 or 4 bytes for drop_item.amount
	struct Item drop_item
	struct Coords coords
}

"Junking items"
client_packet(Item, Junk)
{
	struct Item junk_item
}

"Taking items from the ground"
client_packet(Item, Pickup)
{
	short take_item_index
}

"Result to using an item"
server_packet(Item, Result)
{
	ItemType used_item_type
	struct Item used_item
	struct Weight weight

	union(used_item_type)
	{
		Heal: heal
		{
			int hp_gain
			short hp
			short tp
		}

		HairDye: hair_dye
		{
			char hair_color
		}

		EffectPotion: effect_potion
		{
			short effect_id
		}

		CureCurse: cure_curse
		{
			struct ItemCharacterStats stats
		}

		EXPReward: exp_reward
		{
			int experience
			char level_up
			short stat_points
			short skill_points
			short max_hp
			short max_tp
			short max_sp
		}
	}
}

"Result to dropping items on the ground"
server_packet(Item, Drop)
{
	struct ShortItem dropped_item
	int = 0
	short item_index
	struct Coords coords
	struct Weight weight
}

"Item appeared on the ground"
server_packet(Item, Add)
{
	short item_id
	short item_index
	three item_amount
	struct Coords coords
}

"Result to junking items"
server_packet(Item, Junk)
{
	struct ShortItem junked_item
	int junked_item_amount
	struct Weight weight
}

"Result to taking items from the ground"
server_packet(Item, Pickup)
{
	short taken_item_index
	struct ShortItem taken_item
	struct Weight weight
}

"Receive item (from quest)"
server_packet(Item, Pickup)
{
	struct ShortItem item
	char cur_weight
}

"Lose item (from quest)"
server_packet(Item, Pickup)
{
	struct Item item
	char cur_weight
}


// --- Barber

"Request to interact with a barber NPC"
client_packet(Barber, Open)
{
	short npc_index
}

"Purchasing a hair-style"
client_packet(Barber, Buy)
{
	short npc_index
}

"Open barber NPC interface"
server_packet(Barber, Open)
{
	int session_id
}

"Result from purchasing a hair-style"
server_packet(Barber, Open)
{
	int gold_amount
	struct AvatarChange change
}


// --- Board

struct BoardPostListing
{
	short post_id
	break
	string author
	string subject
}

"Removing a post from a town board"
client_packet(Board, Delete)
{
	short board_id
	short post_id
}

"Posting a new message to a town board"
client_packet(Board, New)
{
	short board_id
	break
	string post_subject
	string post_body
}

"Reading a post on a town board"
client_packet(Board, Get)
{
	short board_id
	short post_id
}

"Opening a a town board"
client_packet(Board, Open)
{
	short board_id
}

"Result to reading a post on a town board"
server_packet(Board, Set)
{
	short post_id
	string post_body
}

"Result to opening a town board"
server_packet(Board, Open)
{
	char board_id
	char num_posts

	struct BoardPostListing posts[num_posts]
}


// --- Music

"Opening the jukebox listing"
client_packet(Music, Open)
{
	struct Coords coords
}

"Requesting a song on a jukebox"
client_packet(Music, Play)
{
	break
	break
	short track_id
}

"Playing a note with the bard skill"
client_packet(Music, Do)
{
	char instrument_id
	char note_id
}

"Result to successfully requesting a song"
server_packet(Music, Update)
{
	int gold_amount
}

"Result to unsuccessfully requesting a song"
server_packet(Music, Do)
{
	short track_id
}

"Result to opening the jukebox listing"
server_packet(Music, Open)
{
	short map_id
	string jukebox_player
}

"Someone playing a note with the bard skill nearby"
server_packet(Music, Play)
{
	short player_id
	Direction direction
	char instrument_id
	char note_id
}

"Play background music"
server_packet(Music, Set)
{
        char mfx_id
}


// --- Map

"Confirm a warp request from the server"
client_packet(Map, Confirm)
{
	short map_id
	short session_id
}

"Request to download a copy of the map"
client_packet(Map, Get)
{
	short map_id
	short session_id
}

"Warp request from server"
server_packet(Map, Request)
{
	WarpType warp_type
	short map_id

	union(warp_type)
	{
		MapSwitch: map_switch
		{
			short map_rid[2]
			three map_filesize
		}
	}

	short session_id
}

"Result after accepting a warp"
server_packet(Map, Update)
{
	WarpType warp_type
	union(warp_type)
	{
		MapSwitch: map switch
		{
			short map_id
			WarpAnimation warp_anim
		}
	}
	struct NearbyInfo nearby
}


// --- Paperdoll

struct Paperdoll_Info
{
	string name
	string home
	string partner
	string tite
	string guild
	string guild_rank
	short player_Id
	char class_id
	Gender gender
	char = 0
}

"Request for a player's paperdoll"
client_packet(Paperdoll, Request)
{
	short player_id
}

"Unequipping an item"
client_packet(Paperdoll, Delete)
{
	short item_id
	char sub_loc
}

"Equipping an item"
client_packet(Paperdoll, Add)
{
	short item_id
	char sub_loc
}

"Result to requesting a paperdoll"
server_packet(Paperdoll, Result)
{
	struct Paperdoll_Info info
	struct Paperdoll_Full paperdoll
	PaperdollIcon paperdoll_icon
}

"Result to unequipping an item"
client_packet(Paperdoll, Delete)
{
	struct AvatarChange change
	struct ItemCharacterStats stats
}

"Result to equipping an item"
client_packet(Paperdoll, Update)
{
	struct AvatarChange change
	struct ItemCharacterStats stats
}

"Nearby player changed clothes"
client_packet(Player, Update)
{
	struct AvatarChange change
}


// --- Book

"Request for a player's book"
client_packet(Book, Request)
{
	short player_id
}

"Result to requesting a book"
server_packet(Book, Result)
{
	struct Paperdoll_Info info
	PaperdollIcon paperdoll_icon
	break
	string quest_name[]
}


// --- System

"#ping command request"
client_packet(System, Syn1)
{
	short something
}

"#ping command result"
server_packet(System, Syn2)
{
	short something
}


// --- Players

"#find command request"
client_packet(Players, Confirm)
{
	raw_string name
}

"Requesting a list of online players"
client_packet(Players, List)
{
	// empty
}

"Requesting a list of online friends"
client_packet(Players, List)
{
	// empty
}

"#find command result - offline"
server_packet(Players, Syn1)
{
	raw_string name
}

"#find command result - same map"
server_packet(Players, Syn2)
{
	raw_string name
}

"#find command result - different map"
server_packet(Players, Syn3)
{
	raw_string name
}


// --- Door

"Opening a door"
client_packet(Door, Open)
{
	struct Coords coords
}

"Door nearby opening"
server_packet(Door, Open)
{
	struct Coords coords
	char = 0
}


// --- Chest

"Opening a chest"
client_packet(Chest, Open)
{
	struct Coords coords
}

"Placing an item in to a chest"
client_packet(Chest, Add)
{
	struct Coords coords
	struct ShortItem add_item
}

"Taking an item from a chest"
client_packet(Chest, Get)
{
	struct Coords coords
	short take_item_id
}

"Result to opening a chest"
server_packet(Chest, Open)
{
	struct Coords coords
	struct ShortItem items[]
}

"Result to placing an item in to a chest"
server_packet(Chest, Result)
{
	struct Item added_item
	struct Weight weight
	struct ShortItem items[]
}

"Result to removing an item from a chest"
server_packet(Chest, Pickup)
{
	struct ShortItem taken_item
	struct Weight weight
	struct ShortItem items[]
}

"Chest contents updating"
server_packet(Chest, Update)
{
	struct ShortItem items[]
}


// --- Refresh

"Requesting new info about nearby objects"
client_packet(Refresh, Request)
{
	// empty
}


server_packet(Refresh, Result)
{
	struct NearbyInfo nearby
}

// --- Range
"Requesting Range about nearby characters and/or npcs"
client_packet(Range, Request)
{
	short player_ids[] // can ommit if only requesting npcs
	break              // can ommit if only requesting players
	char npc_indexes[] // can ommit if only requesting players
}

"Requesting Range about a character"
client_packet(PlayerRange, Request)
{
	short player_ids[] // reads to end
}

"Requesting Range about a npc"
client_packet(NpcRange, Request)
{
	char num_npcs // game server ignores this
	break
	char npc_indexes[] // reads to end
}

"Range for characters and/or npcs"
server_packet(Range, Result)
{
	char num_entities
	break // omitted if not sending back characters
	struct PlayerRange characters[num_entities] // omitted if not sending back characters
	struct NpcRange npcs[] // reads to end
}

// --- Group

struct GroupMember
{
	short player_id
	char leader
	char level
	char hp_pct
	string name
}

"Send party invite / join request"
client_packet(Group, Request)
{
	GroupRequestType request_type
	short player_id
}

"Confirm party invite / join request"
client_packet(Group, Confirm)
{
	GroupRequestType request_type
	short player_id
}

"Remove player from a party"
client_packet(Group, Delete)
{
	short player_id
}

"Request updated party info"
client_packet(Group, Get)
{
	// empty
}

"Received party invite / join request"
server_packet(Group, Request)
{
	GroupRequestType request_type
	short player_id
	raw_string player_name
}

"Member list recieved when party is first joined"
server_packet(Group, New)
{
	struct GroupMember members[]
}

"New player joined the party"
server_packet(Group, Add)
{
	struct GroupMember member
}

"Player left the party"
server_packet(Group, Delete)
{
	short player_id
}

"Left / disbanded a party"
server_packet(Group, Close)
{
	break
}

"Group member list update"
server_packet(Group, List)
{
	struct GroupMember members[]
}

"Update party member's HP"
server_packet(Group, Update)
{
	short player_id
	char hp_pct
}

"Experience gained from party"
server_packet(Group, Target_Group)
{
	short player_id
	int experience
	char level_up
}


// --- Guild

struct GuildStaff
{
	char rank
	break
	string name
}

struct GuildMember
{
	char rank
	break
	string name
	string rank_name
}

"Requested to create a guild"
client_packet(Guild, Request)
{
	int session_id
	break
	raw_string(3) guild_tag
	string guild_name
}

"Confirm pending guild creation invite"
client_packet(Guild, Confirm)
{
	// empty
}

"Leave guild"
client_packet(Guild, Delete)
{
	int session_id
}

"Update the guild description or rank list"
client_packet(Guild, Update)
{
	int session_id
	GuildInfoType info_type

	union(info_type)
	{
		Description: description
		{
			string description
		}

		Ranks: ranks
		{
			string ranks[9]
		}
	}
}

"Final confirm creating a guild"
client_packet(Guild, New)
{
	int session_id
	break
	raw_string(3) guild_tag
	string guild_name
	string description
}

"Request to join a guild"
client_packet(Guild, Set)
{
	int sesssion_id
	break
	raw_string(3) guild_tag
	string recruiter_name
}

"Request guild bank / ranks / description"
client_packet(Guild, Get)
{
	int session_id
	GuildInfoType info_type

	union(info_type)
	{
		Description: description
		{
			string description
		}

		Ranks: ranks
		{
			string ranks[9]
		}

		Bank: bank
		{
			int gold_amount
		}
	}
}

"Accepted a join request"
client_packet(Guild, Do)
{
	short player_id
}

"Deposit gold in to the guild bank"
client_packet(Guild, Buy)
{
	int session_id
	int gold_amount
}

"Request to interact with a guild master"
client_packet(Guild, Open)
{
	short npc_index
}

"Requested member list of a guild"
client_packet(Guild, Private)
{
	int session_id
	raw_string guild_identity
}

"Requested general information of a guild"
client_packet(Guild, Public)
{
	int session_id
	raw_string guild_identity
}

"Disband guild"
client_packet(Guild, Junk)
{
	int session_id
}

"Remove member from guild"
client_packet(Guild, Remove)
{
	int session_id
	raw_string member_name
}

"Update a member's rank"
client_packet(Guild, Rank)
{
	int sesson_id
	char rank
	raw_string member_name
}

"Generic guild result messages"
server_packet(Guild, Result)
{
	GuildResult result_code

	union(result_code)
	{
		Create_Add: create_add
		{
			raw_string name
		}

		Create_Add_Confirm: create_add_confirm
		{
			raw_string name
		}

		Join_Request: join_request
		{
			short player_id
			raw_string name
		}
	}
}

"Guild create request"
server_packet(Guild, Request)
{
	short player_id
	raw_string guild_identity
}

"Guild created"
server_packet(Guild, New)
{
	short leader_id
	break
	string guild_tag
	string guild_name
	string rank_name
	int gold_amount
}

"Get guild description result"
server_packet(Guild, Get)
{
	string description
}

"Get guild rank list result"
server_packet(Guild, Rank)
{
	string ranks[9]
}

"Get guild bank result"
server_packet(Guild, Rank)
{
	int gold_amount
}

"Deposit guild bank result"
server_packet(Guild, Buy)
{
	int gold_amount
}

"Open guild master NPC interface"
server_packet(Guild, Open)
{
	three session_id
}

"Get guild member list result"
server_packet(Guild, Private)
{
	short num_members
	break
	struct GuildMember members[num_members]
}

"Get guild info result"
server_packet(Guild, Public)
{
	string name
	string tag
	string create_date
	string description
	string wealth
	string ranks[9]
	short num_staff
	break
	struct GuildStaff staff[num_staff]
}

"Joined guild info"
server_packet(Guild, Update)
{
	short recruiter_id
	break
	string guild_tag
	string guild_name
	string rank_name
	break
}


// --- Magic

"Begin spell chanting"
client_packet(Magic, Request)
{
	short spell_id
	three timestamp
}

// TODO: Need to find out target_type enum numbers
// Probably 0=self, 1=player, 2=npc

"Self-targeted spell cast"
client_packet(Magic, Target_Self)
{
	char target_type
	short spell_id
	three timestamp
}

"Targeted spell cast"
client_packet(Magic, Target_Other)
{
	char target_type
	// TODO: Find out what these are
	char = 0
	short = 0
	short spell_id
	three timestamp
}

"Group spell cast"
client_packet(Magic, Target_Group)
{
	short spell_id
	three timestamp
}

"Nearby player chanting a spell"
server_packet(Magic, Request)
{
	short player_id
	short spell_id
}

"Nearby player self-casted a spell"
server_packet(Magic, Target_Self)
{
	short player_id
	short spell_id
	int Magic_heal_hp
	char hp_pct

	// TODO: Represent optionally present data
	short hp
	short tp
	short = 1
}

"Nearby player hit by a spell from a player"
server_packet(Player, Cast)
{
	short caster_id
	short victim_id
	char caster_direction
	three damage
	char hp_pct
	char victim_died
	short spell_id
}

struct GroupHealTargetPlayer
{
	break
	break
	break
	break
	break
	short player_id
	char hp_pct
	short hp
}

"Nearby player(s) hit by a group spell from a player"
server_packet(Magic, Target_Group)
{
	short spell_id
	short caster_id
	short caster_tp
	short spell_heal_hp

	struct GroupHealTargetPlayer players[]
}


// --- Trade

struct TradeItemData
{
	short player1_id
	struct Item player1_items[]
	break
	short player2_id
	struct Item player2_items[]
	break
}

"Requesting a trade with another player"
client_packet(Trade, Request)
{
	char unk1
	short player_id
}

"Confirming a trade request"
client_packet(Trade, Confirm)
{
	char unk1
	short player_id
}

"Remove an item from the trade screen"
client_packet(Trade, Delete)
{
	short item_id
}

"Mark trade as agreed"
client_packet(Trade, Update)
{
	char agree_state
}

"Add an item to the trade screen"
client_packet(Trade, Add)
{
	struct Item add_item
}

"Cancel the trade"
client_packet(Trade, Close)
{
	char unk1
}

"Trade request from another player"
server_packet(Trade, Request)
{
	char unk1
	short player_id
	raw_string player_name
}

"Trade window opens"
server_packet(Trade, Open)
{
	short player_id
	string player_name
	short your_player_id
	string your_name
}

"Trade items updated"
server_packet(Trade, Result)
{
	struct TradeItemData trade_data
}

"Trade items updated"
server_packet(Trade, Do)
{
	struct TradeItemData trade_data
}

"Own agree state updated"
server_packet(Trade, Hit)
{
	char agree_state
}

"Partner agree state updated"
server_packet(Trade, Hit)
{
	short player_id
	char agree_state
}

"Partner closed trade window"
server_packet(Trade, Close)
{
	short player_id
}


// --- NPC activity

struct LevelUpStats
{
	char level
	short stat_points
	short skill_points
	short max_hp
	short max_tp
	short max_sp
}

// NPC/Cast_Result/Confirm could share data probably

"Nearby NPC hit by a player"
server_packet(NPC, Result)
{
	short player_id
	char player_direction
	short npc_index
	three damage
	short hp_pct
	// This is probably something
	char = 1
}

"Nearby NPC hit by a spell from a player"
server_packet(MagicNpc, Result)
{
	short spell_id
	short player_id
	char player_direction
	short npc_index
	three damage
	short hp_pct
	short caster_tp
}

"Nearby NPC killed by player"
server_packet(NPC, Hit)
{
	short killer_id
	char killer_direction
	short npc_index
	short drop_index
	short drop_id
	struct Coords drop_coords
	int drop_amount
	three damage
	int experience
}

"Nearby NPC killed by player and you levelled up"
server_packet(NPC, Confirm)
{
	short killer_id
	char killer_direction
	short npc_index
	short drop_index
	short drop_id
	struct Coords drop_coords
	int drop_amount
	three damage
	int experience
	struct LevelUpStats level_up
}

"Nearby NPC killed by player spell"
server_packet(MagicNpc, Hit)
{
	short spell_id
	short killer_id
	char killer_direction
	short npc_index
	short drop_index
	short drop_id
	struct Coords drop_coords
	int drop_amount
	three damage
	short caster_tp
	int experience
}

"Nearby NPC killed by player spell and you leveled up"
server_packet(MagicNpc, Confirm)
{
	short spell_id
	short killer_id
	char killer_direction
	short npc_index
	short drop_index
	short drop_id
	struct Coords drop_coords
	int drop_amount
	three damage
	short caster_tp
	int experience
	struct LevelUpStats level_up
}

"Killing all boss chidren"
server_packet(NPC, Junk)
{
	short npc_id
}

struct NPCUpdatePos
{
	short npc_index
	struct Coords coords
	Direction direction
}

struct NPCUpdateAttack
{
	short npc_index
	char killed_state
	Direction direction
	short player_id
	three damage
	char hp_pct
}

struct NPCUpdateChat
{
	short npc_index
	char message_length
	raw_string(message_length) message
}

"Main NPC update message"
server_packet(NPC, Set)
{
	struct NPCUpdatePos pos[]
	break
	struct NPCUpdateAttack attack[]
	break
	struct NPCUpdateChat chat[]
	break
}

// --- Quest

struct QuestProgressEntry
{
	string name
	string description
	short icon
	short progress
	short target
	break
}

struct DialogQuestEntry
{
	short quest_id
	string quest_name
}

struct DialogEntry
{
	DialogEntryType entry_type

	// Allowing a union here would require a lot of extra implementation work
	// link_id will just go unused when entry_type != Link
	short link_id
	string line
}

"Request to interact with quest NPC"
client_packet(Quest, Do)
{
	short npc_index

	// Quest id is 0 unless manually selected on the dialog
	short quest_id
}

"Response to a quest NPC dialog"
client_packet(Quest, Confirm)
{
	short session_id
	short dialog_id
	short quest_id
	short npc_index
	DialogResult result_type

	union(result_type)
	{
		Link: link
		{
			char action
		}
	}
}

"Quest history / progress request"
client_packet(Quest, List)
{
	QuestPage page
}

"Quest selection dialog"
server_packet(Quest, Talk)
{
	char quest_count
	short vendor_id
	short quest_id
	short session_id
	short dialog_id
	break

	struct DialogQuestEntry quest_entries[quest_count]
	struct DialogEntry entries[]
}

"Quest history / progress result"
server_packet(Quest, List)
{
	QuestPage page
	// EOSERV sends total number of quests which seems wrong
	short num_quests

	union(page)
	{
		Progress: progress
		{
			struct QuestProgressEntry quests[]
		}

		History: history
		{
			string quests[]
		}
	}
}

// This is probably wrong
"Nearby player levelled up from quest"
server_packet(Item, Confirm)
{
	short player_id
}


// --- Arena

"Arena is blocked message"
server_packet(Arena, Drop)
{
	// empty
}

"Arena start message"
server_packet(Arena, Do)
{
	char num_players
}

"Arena kill message"
server_packet(Arena, Hit)
{
	short = 0
	break
	char = 0
	break
	int num_kills
	break
	string killer_name
	string victim_name
}

"Arena win message"
server_packet(Arena, Hit)
{
	string winner_name
	int num_kills
	break
	string killer_name
	string victim_name
}


// --- TODO: Law / Priest packets


// --- Misc.

enum MapDamageType : char
{
	1 TPDrain
	2 Spikes
}

struct MapDrainDamageOther
{
	short player_id
	char hp_pct
	short damage
}

"HP/TP update"
server_packet(GameBar, Set)
{
	short hp
	short tp
}

"Stats update"
server_packet(GameBar, List)
{
	short class_id
	struct CharacterStats3 stats
}

"Karma/experience update"
server_packet(GameBar, Result)
{
	int experience
	short karma
	char level_up

	// Only if level_up != 0
	short stat_points
	short skill_points
}

"Map effect"
server_packet(Effect, Do)
{
	MapEffect effect
	char param
}

"Map spike timer"
server_packet(Effect, Public)
{
	char = 'S'
}

"Map spell effect"
server_packet(Effect, Update)
{
	struct Coords coords
	short effect_id
}

"Taking spike or tp drain damage"
server_packet(Effect, Hit)
{
	MapDamageType map_damage_type

	union(map_damage_type)
	{
		TPDrain: tp_drain
		{
			short tp_damage
			short tp
			short max_tp
		}

		Spikes: spikes
		{
			short damage
			short hp
			short max_hp
		}
	}
}

"Map drain damage"
server_packet(Effect, Target_Other)
{
	short damage
	short hp
	short max_hp
	struct MapDrainDamageOther others[]
}

"Nearby character taking spike damage"
server_packet(Effect, Cast)
{
	short player_id
	char hp_pct
	char died
	three damage
}

"Sound effect"
server_packet(Sound, Set)
{
	char sound_id
}

